


           #######  Ansibl Handlers  ######
		   
	Intoduction to Handlers
       - Imagine you are manageing a web server infrastructure with muliple servers.
             . web server 01 
             . web server 02
             . web server 03

  - you frequently changes to the web server's configuration file to adjust various settings,  However
modifying the configuration file alone does not apply the changes immediately.

  - To ensure that changes  take effect, tou need to restart the web server service.
  
   
   --- IN THIS SECNARIO ---
   
  - You have to manually execute a task to restart the web server service after every configuration update.
  - This manual manual intervention becomes time consuming and prone to error as the infrastructure grows . 

     -- This where ansible " hanlders "   become handy.
	 
	 - With handlers
	       - you can define an action to restart the web server service, and associate it with the task that modifies the configuration file.
		   - This creates a dependency between the task and the handler.  Now, When ever the configuration file is modified during the playbook run, 
 the associated handler is triggered ensuring that the web server service is automatically restarted.   

   -- By utilizeing handlers , you eliminate the manual intervention and ensure that the web server service is always restarted when necessary.
   
   
   -- Handlers are special tasks in Ansible, they triggered only when the task notifiy the handlers,  the task did'nt notify the handler the handler won't run.




          ------  Ansible Roles  ------
		  
 - Just like, how you would assign roles to the pepole in the real world

  - In the Ansible world you would assign roles to the blank servers. to make them a database server, or a Web server, or Redis messageing server or a Bckup server.

 -- In the Automation world,  Assign a role means doing everything you need to do to make a server a database server.  
	Such as   - Installing the prerequisities, required for MySql, 
		           - Installing MySql packages themselves
		           - Configureing the MySql service, 
			       - and finally configureing database or users. 
   
 -- We can do this by playbook
 
---
- name: Installing and Configure MySql
  hosts: db-server01
  tasks:
    - name: Install Pre-Requesties
      yum: name=pre-req-packages   state=presemt

   - name: Install MySql packages
     yum: name=mysql  state=present

   - name: Start mysql service
     service:  name=mysql   state=started

   - name: Configure Database
     mysql_db:  name=db1  state=present

	 
  Note:  Then, if we can do this by playbook,  Why do we need Roles.
    - Once a person develop this ansible paybook, it can be shared with hundreds of thousands of others  trying to do the same thing, install MySql.

 - 	Insted of all of them rewriting this piece of code, You could package it into a role and reuse it later. 
 - Next time, you could simply assign the role you created, and in a playbook like this....

---
- name: Install and Configure MySql
  hosts: db-server01
  tasks:
  role:
     - mysql

 
  That's the primary purpose of roles, to make your work re-usable.

   - Roles also help in Organizing  your code with Ansible.
  - Roles introduce a set of best practices that must be followed, to organize 
           - all tasks into a task directory.
          - all variables in a vars directory.
          - Any default values goes into the default directory.
         - All hanlders goes into the handlers directory.
         - And any template used by the playbooksgo into the templates directory.		 

 Note: Ansible galaxy is one such community where you can find thousands of roles.
  - Before you writeing playbooks,  I highly recomend take a look at this community first.
  
  
      --- How do get start with roles, it's easy.  First we create a directory structure required for a role, But you don't have to do that manually.
	- Ansible Galaxy ia neet tool, that creats a skeleton for you. 

  Use < ansible-galaxy init  mysql  >  command to intialize and create a directory structure.

   - and move your code to that directory.

 - So how do you use your role within your playbook.?
 
  --- How can my playbook find the role..?  There are different ways to do that 
  
---
- name: Install and Configure MySql
  hosts: db-server01
  tasks:
  roles:
     - mysql
	 
  - i could create a directory called roles with in my playbook folder,  And move the role i created <mysql> under it.
  - When the playbook runs ansible looks for a role named mysql under the roles dorectory. that's one way of doing it.
  
  OR, you can move the roles to a comman directory designated fir our roles on your system at  "  /etc/ansible/roles " location.
  
  OR, Of course,  that's defined in the Ansible configuration file "  /etc/ansible/ansible.cfg  "  as roles_path = /etc/ansible/roles  
  
  
         ----------------------   TO FIND ROLES   ----------
		 
  - you can search Ansible galaxy in the browser

   $ ansible-galaxy search mysql  ------- To search in CLI 
   
   $ ansible-galaxy install geerlingguy.mysql   ------------- to install role 
    - role default location  -----  "  /etc/ansible/roles /  .ansible/roles " directory 
	
	$ ansible-galaxy install kodekloud1.mysql  --------------------------------------
	
	
	
	
	$ ansible-config  dump | grep ROLE   ------------ To search the Ansible configuration using this command 

	
	$ ansible-galaxy list   ----------------- To list Roles
# /home/vagrant/.ansible/roles
- geerlingguy.mysql, 4.3.3
# /etc/ansible/roles

	
	- the roles can now be used in your playbook, by specifying the nmae like this an array of strings as role names.
	
	---
	- name: Install and Configure MySql
      hosts: 
      roles:
         - role:  geerlingguy.mysql
		   become: yes
		   vars: 
		      mysql_user_name: db-user    
			  
			  
			  
	-- To configure a single server with both database and web application on it, Assign both roles to it.

---
- name: Install and Configre MySql
   hosts: db-and-webserver
   roles:
     - geerlingguy.mysql
	 - nginx
	 
	 
	-- TO configue it seperately on seperate servers,  Create two plays in the playbook, And assign the respective roles to them.

---
- name: Install and Configure MySql
  hosts: db-server
  roles:
    - role:   geerlingguy.mysql
	
- name: Install and Configure Web-Server
  hosts: web-server
  roles:
    - role:  nginx
	   
         
			  
		 
		 
  		 
  
   
  
  
 
 
    


















   
   
   
   
   
   
   
   
   
   
   
   
   
   